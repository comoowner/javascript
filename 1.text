2.1Data Types
    1. Number
        1+1->2
    2. String(Text)
        "1 +"1"->11
    3. Boolean
        true, false, null(empty)
2.2Variables(변수)
    1. const 재선언X 재할당X
        const a = 10;
        const b = 2;
        console.log(a + b);
    2. let 재선언X 재할당O
        let a = b;
        let a = c;  
    3. var 재선언O 재할당O
        var a = b;
        var a = c;
        a = d;
2.5Array=데이터 나열
    const season = ["spring","summer", "autumn"];
    consol.log(season[1]); ->summer
    season.push(winter); ->["spring","summer", "autumn", "winter"]
2.6Object 



    const player = {
    name : tomato,
    color : red,
    food : true,
    }; (player=object, name color=porperty)

    console.log(player);
    console.log(player.name); => tomato
    console.log(player["name"]); => tomato

    또한 property를 바꾸는 것은 가능하지만 선언된 object를 바꾸는 것은 불가능하다.(player는 const됐기때문에 재할당X)
    
    player.color = "blue";
    console.log(player.color);
    --> blue

    그리고 property를 추가 할 수도 있다.

    player.koreanName = "토마토";

    --> {name: "tomato", color: "blue", food: true, koreaName: "토마토"}
2.7Functions
    function sayHi(nameOfPerson, rankOfPerson) {
        console.log("Hi, "+ rankOfPerson +" "+ nameOfPerson)
        } //nameOfPerson=argument

    sayHi("Lars", "slave")
    sayHi("JM", "king")
2.8Functions2
    const player = {
    name : function(Name) {
    console.log("Your Name is " + Name + " 입니다.")
    } ,
    sayHello : function(Age) {
    console.log("Your age is " + Age + " 입니다." )
    }
    }

    player.sayHello(14)
    player.name("james")    
2.11Returns
    return을 통해 함수를 호출한 녀석에게 다시 주어서 그걸 갖고 또 다른 함수를 호출하는데 쓴다(연산결과 자체가 변수에게 주어진다)
    2.7, 2.8에선 함수 안에서 console.log 했으니 return 필요X
    함수 밖에서 그 함수를 const, let 에 묶으면 return 값을 출력
    return 하는 순간, function 종료
2.13Conditions
    promt, parseInt
        prompt();라는 함수는 사용자에게 창을 띄어 값을 받음.
        prompt();를 사용하면 답을 할때까지 코드의 실행을 멈추고, 매우 오래된 방법임. 별로 안이쁨. css로 바꾸지도 못함.
        const age = prompt("how old are you?");
        console.log(typeof age);
        typeof라는 키워드를 쓰면 type를 볼 수 있는데, prompt();에서 숫자를 입력해도 string이라고 뜬다. string이 디폴트이기 때문이다.

        한 type로 받아서 다른 type로 바꾸는 작업을 해야한다. "15"-->15
        string-->number로 변환해주는 함수 parseInt();
        console.log(typeof "15", typeof parseInt("15")); --> string number
        이렇게 숫자로 변환이 되야 비교를 할 수 있다.
        참고로 "숫자"가 아닌게 입력되면 변환이 안됨. NaN(not a number)

        const age = parseInt(prompt("how old are you?"));
        console.log(age);
    isNaN, if
        isNaN 은 무언가가 NaN인지 판별하는 방법
        const age= parseInt(prompt (“How old are you?”));
        console.log(isNaN(age));
        숫자입력하면 false
        글자입력하면 ture

        if(condition){
        실행코드=true ---실행
        실행코드=false ----다음 else 값 실행
        } else{

        }
        
        const age = parseInt(prompt("How old ru?"));

        if(isNaN(age)){
            console.log("write number");
        } else {console.log("ye that is number");
        }
3.1Html in JS
    document의 함수 중에는 getElementById 라는 함수가 있는데,
    이 함수가 HTML에서 id를 통해 element를 찾아준다.
    element를 찾고 나면, JS로 해당 HTML의 무엇이든 바꿀 수 있다.
    ex. element의 innerText를 바꾼다던가 (title.innerText = "Got you!";)
    id, className 등을 가져 올 수 있음. (cosole.log(title.id);)
3.2Searching for Elements
    - getElementsByClassName() : 많은 element를 가져올때 씀(array를 반환)
    - getElementsByTagName() : name을 할당할 수 있음(array를 반환)
    - querySelector : element를 CSS selector방식으로 검색할 수 있음 (ex. h1:first-child)
    단 하나의 element를 return해줌
    ⇒ hello란 class 내부에 있는 h1을 가지고 올 수 있다(id도 가능함)
    - 첫번째 element만 가져옴
    - 조건에 맞는 세개 다 가져오고 싶으면 querySelectorAll
    ⇒ 세개의 h1이 들어있는 array를 가져다 줌
    - querySelector("#hello); 와 getElementById("hello"); 는 같은 일을 하는 것임
    하지만 후자는 하위요소 가져오는 것을 못하므로 전자만 쓸거다
3.3Events
    - 지금 js파일이 있기 때문에 js를 통해 html의 내용을 가져올 수 있는 거임
    - document가 html이 js파일을 load하기 때문에 존재 → 그 다음에 browser가 우리가 document에 접근할 수 있게 해줌
    - element의 내부를 보고 싶으면 console.dir()
    기본적으로 object로 표시한 element를 보여줌(전부 js object임)
    그 element 중 앞에 on이 붙은 것들은 event임
    - event: 어떤 행위를 하는 것
    모든 event는 js가 listen할 수 있음
    - eventListener : event를 listen함 → js에게 무슨 event를 listen하고 싶은 지 알려줘야 함
    - title.addEventListener("click") : 누군가가 title을 click하는 것을 listen할 거임 → 무언가를 해줘야함

    const title = document.querySelector("div.hello:first-child h1");

    function handleTitleClick(){
    title.style.color = "blue";
    }
    title.addEventListener("click",handleTitleClick);
    //click하면 handleTitleClick이라는 function이 동작하길 원함
    //그래서 handle~ 함수에 () 를 안넣은 것임
    //즉, js가 대신 실행시켜주길 바라는 것임!

    - function이 js에게 넘겨주고 유저가 title을 click할 경우에 js가 실행버튼을 대신 눌러주길 바라는 것임( 직접 handleTitleClick(); 이렇게 하는 것이 아니라)
    - 함수에서 () 이 두 괄호를 추가함으로써 실행버튼을 누를 수 있는 거임
3.7
    style에 적합한 도구는 CSS
    animation에 적합한 도구는 JS
    css파일에
    h1 {
    color: cornflowerblue;
    }
    .clicked {
    color: tomato;
    }
    를 적고
    js에서는 h1에 active class를 전달하는거다.
    const h1 = document.querySelector("div.hello:first-child h1");
    function handleTitleClick() {
    if(h1.className === "clicked") {
    h1.className = "";
    } else {
    h1.className = "clicked";
    }
    }
    h1.addEventListener("click", handleTitleClick);
    여기서 JS는 HTML을 변경할거고, CSS는 HTML을 바라보고 style을 변경한다.
    근데 조금 문제가 있는 active는 우리가 지어준 이름이다. raw value라고 하는데, 이름을 바꾸다가 에러가 발생할 수도 있다. const로 지정해라.
    function handleTitleClick() {
    const clickedClass = "clicked";
    if(h1.className === clickedClass) {
    h1.className = "";
    } else {
    h1.className = clickedClass;
    }
    }
    이렇게 작성하면 에러가 발생할 수 있는 부분을 축소한다.

    그런데, html의 h1에 sexy-font라는 class name이 있었는데 js를 실행하니 교체되었다.
    최초의 class name이 사라졌고.., sexy-font라는 class name을 간직하고 싶은데 이건 어떻게 해야하는가.
    const clickedClass = "clicked sexy-font";에 추가하면 되긴 하는데 좋은 방법은 아니다. class를 추가할 때마다 js랑 css에서 업데이트를 계속 해야하니까.
    우리가 해야하는건 js로 모든 class name을 변경하지 않는거다. 이 sexy-font를 삭제하지 않고 clicked class를 변경하고 싶다는거지. 다음영상에서.

    classList 우리가 class들의 목록으로 작업할수 있게끔 허용해준다.
    className은 이전calss를 상관하지않고 모든걸 교체해 버린다.

    classList를 이용하는건
    js에서 건드리는건 HTML element가 가지고있는 또하나의 요소 사용하는 것이다.
    = element의 class내용물을 조작하는 것을 허용한다는 뜻

    contains은 우리가 명시한 class가 HTML element의 class에 포함되어 있는지 말해준다

    toggle은 토큰이 존재하면 토큰제거
    토큰존재 하지않으면 토큰 추가

    ex)
    toggle은 h1의 classList에 clicked class가 이미있는지 확인하여
    만약있다면 toggle 이 clicked를 제거해준다
    만약 class name이 존재하지 않는다면 toggle은 classname 추가
4.2
    
    function onLoginSubmit(event){
    event.preventDefault(); // 브라우저가 기본 동작을 실행하지 못하게 막기 // event object는 preventDefault함수를 기본적으로 갖고 있음
    console.log(event);
    }

    loginForm.addEventListener("submit", onLoginSubmit); // submit 이벤트가 발생한다면, onLoginSubmit함수를 실행시킨다는 의미 // JS는 onLoginSubmit함수 호출시 인자를 담아서 호출함. 해당 인자는 event object를 담은 정보들

    ★ 중요 ★
    form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어있다. << 우리가 원하는 것이 아님!
    preventDefault() 함수를 추가함으로써 브라우저의 기본 동작을 막을 수 있다!!

    이 preventDefault 함수는 EventListener 함수의 '첫 번째 argument' 안에 있는 함수이다. 첫 arument는 지금 막 벌어진 event들에 대한 정보를 갖고 있다.
    JS는(기본적으로)argument를 담아서 함수를 호출하는데, 이 argument가 기본 정보들을 제공하고 있다. ex) 누가 submit주체인지, 몇 시에 submit을 했는지 등등 콘솔에 출력해보면 알 수 있음